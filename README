CakePHP is a rapid development framework for PHP which uses commonly known design patterns like Active Record, Association Data Mapping, Front Controller and MVC. Our primary goal is to provide a structured framework that enables PHP users at all levels to rapidly develop robust web applications, without any loss to flexibility.

The Cake Software Foundation - promoting development related to CakePHP
http://cakefoundation.org/

CakePHP - the rapid development PHP framework
http://www.cakephp.org

Cookbook - user documentation for learning about CakePHP
http://book.cakephp.org

API - quick reference to CakePHP
http://api.cakephp.org

The Bakery - everything CakePHP
http://bakery.cakephp.org

The Show - live and archived podcasts about CakePHP and more
http://live.cakephp.org

CakePHP Google Group - community mailing list and forum
http://groups.google.com/group/cake-php

#cakephp on irc.freenode.net - chat with CakePHP developers
irc://irc.freenode.net/cakephp

CakeForge - open development for CakePHP
http://cakeforge.org

CakePHP gear
http://www.cafepress.com/cakefoundation

Recommended Reading
http://astore.amazon.com/cakesoftwaref-20/

<?
$words = @file('dictionary.txt');
$count = count($words);
$results = explode(',',$argv[1]);
$rests = $words;

$guusuu = 0;
$kisuu = 0;
//var_dump(explode(',',$argv[1]));

searchNext($argv[2]);

echo "GUUSUU:".$guusuu;
echo "KISUU:".$kisuu;

function searchNext($word) {
	addWord($word);


	//最後の文字を取得
	$lastString = substr($word,strlen($word)-1,1);

	$searchList = array();
	foreach ($GLOBALS['rests'] as $rest) {
		$firstString = substr($rest,0,1);
		if ($firstString == $lastString) {
			//単語リストに追加
			array_push($searchList,$rest);
		}
	}
	//var_dump($searchList);
	if (!$searchList) {
		//検索結果無し
echo count($GLOBALS['results']).'\n';
		if (count($GLOBALS['results'])%2 == 0) {
			//これが正解
			$GLOBALS['guusuu'] += 1;
			//var_dump($GLOBALS['results']);
		} else {
			$GLOBALS['kisuu'] += 1;
		}
		deleteWord($word);
		return false;
	}

	foreach ($searchList as $nextWord) {
		searchNext($nextWord);
	}

	deleteWord($word);
	return false;
}

function addWord($word) {
	//結果リストに単語を追加
	array_push($GLOBALS['results'],trim($word));
	//残りリストを更新
	$rests = array();
	foreach ($GLOBALS['rests'] as $rest) {
	$rest = trim($rest);
		if (!in_array($rest,$GLOBALS['results'])) {
			array_push($rests,$rest);
		}
	}
	$GLOBALS['rests'] = $rests;
}

function deleteWord($word) {
//var_dump($GLOBALS['rests']);
//var_dump($GLOBALS['results']);
	//残りリストに単語を追加
	array_push($GLOBALS['rests'],$word);
	//結果リストから単語を削除
	$results = array();
	foreach ($GLOBALS['results'] as $res) {
		if ($res != $word) {
			array_push($results,$res);
		}
	}
	$GLOBALS['results'] = $results;
}